{"ast":null,"code":"import axios from 'axios';\nimport { MENU_ITEM_LIST_REQUEST, MENU_ITEM_LIST_SUCCESS, MENU_ITEM_LIST_FAIL, MENU_ITEM_DETAILS_REQUEST, MENU_ITEM_DETAILS_SUCCESS, MENU_ITEM_DETAILS_FAIL, MENU_ITEM_CREATE_REQUEST, MENU_ITEM_CREATE_SUCCESS, MENU_ITEM_CREATE_FAIL, MENU_ITEM_UPDATE_REQUEST, MENU_ITEM_UPDATE_SUCCESS, MENU_ITEM_UPDATE_FAIL, MENU_ITEM_DELETE_REQUEST, MENU_ITEM_DELETE_SUCCESS, MENU_ITEM_DELETE_FAIL } from '../constants/menuItemConstants';\n\n// Mock menu items data for fallback when API fails\nexport const mockMenuItems = [{\n  _id: '60d21b4667d0d8992e610c85',\n  name: 'Burger',\n  description: 'Delicious burger with cheese, lettuce, tomato, and special sauce',\n  price: 200,\n  image_url: 'https://brookrest.com/wp-content/uploads/2020/05/AdobeStock_282247995-scaled.jpeg',\n  category: 'Burger',\n  availability: true,\n  rating: 4.5,\n  numReviews: 12\n}, {\n  _id: '60d21b4667d0d8992e610c86',\n  name: 'Pizza',\n  description: 'Fresh pizza with chicken, bell peppers, and cheese',\n  price: 400,\n  image_url: 'https://th.bing.com/th/id/OIP._Tuj6ElUF8jhhcSg41_V_QHaE8?cb=iwp2&rs=1&pid=ImgDetMain',\n  category: 'Pizza',\n  availability: true,\n  rating: 4.2,\n  numReviews: 8\n}, {\n  _id: '60d21b4667d0d8992e610c87',\n  name: 'Shawarma',\n  description: 'Delicious shawarma with grilled chicken, vegetables, and special sauce',\n  price: 200,\n  image_url: 'https://www.licious.in/blog/wp-content/uploads/2020/12/Chicken-Shawarma.jpg',\n  category: 'Shawarma',\n  availability: true,\n  rating: 4.0,\n  numReviews: 5\n}];\n\n// List menu items action\nexport const listMenuItems = (category = '') => async dispatch => {\n  try {\n    dispatch({\n      type: MENU_ITEM_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(category ? `/api/menu-items?category=${category}` : '/api/menu-items');\n    dispatch({\n      type: MENU_ITEM_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.error('Failed to fetch menu items from API, using mock data:', error);\n\n    // Use mock data when API fails\n    const filteredMockData = category ? mockMenuItems.filter(item => item.category === category) : mockMenuItems;\n    dispatch({\n      type: MENU_ITEM_LIST_SUCCESS,\n      // Use SUCCESS instead of FAIL to show mock data\n      payload: filteredMockData\n    });\n  }\n};\n\n// Get menu item details action\nexport const getMenuItemDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: MENU_ITEM_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/menu-items/${id}`);\n    dispatch({\n      type: MENU_ITEM_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.error('Failed to fetch menu item details from API, using mock data:', error);\n\n    // Find the menu item in our mock data\n    const mockMenuItem = mockMenuItems.find(item => item._id === id);\n    if (mockMenuItem) {\n      dispatch({\n        type: MENU_ITEM_DETAILS_SUCCESS,\n        // Use SUCCESS instead of FAIL to show mock data\n        payload: mockMenuItem\n      });\n    } else {\n      // If we can't find the item in our mock data, create a generic one\n      const genericMenuItem = {\n        _id: id,\n        name: 'Sample Menu Item',\n        description: 'This is a sample menu item description used when API fails',\n        price: 15,\n        image_url: '/images/default-food.jpg',\n        category: 'Other',\n        availability: true,\n        rating: 4.0,\n        numReviews: 5\n      };\n      dispatch({\n        type: MENU_ITEM_DETAILS_SUCCESS,\n        payload: genericMenuItem\n      });\n    }\n  }\n};\n\n// Create menu item action (admin only)\nexport const createMenuItem = menuItem => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: MENU_ITEM_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    try {\n      // Try to create with the API\n      const {\n        data\n      } = await axios.post('/api/menu-items', menuItem, config);\n      dispatch({\n        type: MENU_ITEM_CREATE_SUCCESS,\n        payload: data\n      });\n    } catch (apiError) {\n      console.error('API error during menu item creation:', apiError);\n\n      // If there's a network error, use mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock creation due to API failure');\n\n        // Create new mock item with generated ID\n        const newItem = {\n          _id: 'mock_item_' + Date.now(),\n          ...menuItem,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          rating: 0,\n          numReviews: 0\n        };\n\n        // Add to mockMenuItems array if it exists\n        if (typeof mockMenuItems !== 'undefined') {\n          mockMenuItems.push(newItem);\n        }\n\n        // Dispatch success with the mock data\n        dispatch({\n          type: MENU_ITEM_CREATE_SUCCESS,\n          payload: newItem\n        });\n\n        // Return success to the component\n        return newItem;\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: MENU_ITEM_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Update menu item action (admin only)\nexport const updateMenuItem = menuItem => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: MENU_ITEM_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    try {\n      // Try to update with the API\n      const {\n        data\n      } = await axios.put(`/api/menu-items/${menuItem._id}`, menuItem, config);\n      dispatch({\n        type: MENU_ITEM_UPDATE_SUCCESS,\n        payload: data\n      });\n    } catch (apiError) {\n      console.error('API error during menu item update:', apiError);\n\n      // If there's a network error, use mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock update due to API failure');\n\n        // Create updated mock item\n        const updatedItem = {\n          ...menuItem,\n          updated_at: new Date().toISOString()\n        };\n\n        // Update the mockMenuItems array if it exists\n        if (typeof mockMenuItems !== 'undefined') {\n          const index = mockMenuItems.findIndex(item => item._id === menuItem._id);\n          if (index !== -1) {\n            mockMenuItems[index] = updatedItem;\n          }\n        }\n\n        // Dispatch success with the mock data\n        dispatch({\n          type: MENU_ITEM_UPDATE_SUCCESS,\n          payload: updatedItem\n        });\n\n        // Return success to the component\n        return updatedItem;\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: MENU_ITEM_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Delete menu item action (admin only)\nexport const deleteMenuItem = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: MENU_ITEM_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    try {\n      // Try to delete with the API\n      await axios.delete(`/api/menu-items/${id}`, config);\n      dispatch({\n        type: MENU_ITEM_DELETE_SUCCESS\n      });\n    } catch (apiError) {\n      console.error('API error during menu item deletion:', apiError);\n\n      // If there's a network error, use mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock deletion due to API failure');\n\n        // Remove from mockMenuItems array if it exists\n        if (typeof mockMenuItems !== 'undefined') {\n          const index = mockMenuItems.findIndex(item => item._id === id);\n          if (index !== -1) {\n            mockMenuItems.splice(index, 1);\n          }\n        }\n\n        // Dispatch success\n        dispatch({\n          type: MENU_ITEM_DELETE_SUCCESS\n        });\n        return true; // Return success to the component\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: MENU_ITEM_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","MENU_ITEM_LIST_REQUEST","MENU_ITEM_LIST_SUCCESS","MENU_ITEM_LIST_FAIL","MENU_ITEM_DETAILS_REQUEST","MENU_ITEM_DETAILS_SUCCESS","MENU_ITEM_DETAILS_FAIL","MENU_ITEM_CREATE_REQUEST","MENU_ITEM_CREATE_SUCCESS","MENU_ITEM_CREATE_FAIL","MENU_ITEM_UPDATE_REQUEST","MENU_ITEM_UPDATE_SUCCESS","MENU_ITEM_UPDATE_FAIL","MENU_ITEM_DELETE_REQUEST","MENU_ITEM_DELETE_SUCCESS","MENU_ITEM_DELETE_FAIL","mockMenuItems","_id","name","description","price","image_url","category","availability","rating","numReviews","listMenuItems","dispatch","type","data","get","payload","error","console","filteredMockData","filter","item","getMenuItemDetails","id","mockMenuItem","find","genericMenuItem","createMenuItem","menuItem","getState","userLogin","userInfo","config","headers","Authorization","token","post","apiError","message","response","status","log","newItem","Date","now","created_at","toISOString","updated_at","push","updateMenuItem","put","updatedItem","index","findIndex","deleteMenuItem","delete","splice"],"sources":["C:/Users/HP/CascadeProjects/food-ordering-system/client/src/actions/menuItemActions.js"],"sourcesContent":["import axios from 'axios';\nimport {\n  MENU_ITEM_LIST_REQUEST,\n  MENU_ITEM_LIST_SUCCESS,\n  MENU_ITEM_LIST_FAIL,\n  MENU_ITEM_DETAILS_REQUEST,\n  MENU_ITEM_DETAILS_SUCCESS,\n  MENU_ITEM_DETAILS_FAIL,\n  MENU_ITEM_CREATE_REQUEST,\n  MENU_ITEM_CREATE_SUCCESS,\n  MENU_ITEM_CREATE_FAIL,\n  MENU_ITEM_UPDATE_REQUEST,\n  MENU_ITEM_UPDATE_SUCCESS,\n  MENU_ITEM_UPDATE_FAIL,\n  MENU_ITEM_DELETE_REQUEST,\n  MENU_ITEM_DELETE_SUCCESS,\n  MENU_ITEM_DELETE_FAIL\n} from '../constants/menuItemConstants';\n\n// Mock menu items data for fallback when API fails\nexport const mockMenuItems = [\n  {\n    _id: '60d21b4667d0d8992e610c85',\n    name: 'Burger',\n    description: 'Delicious burger with cheese, lettuce, tomato, and special sauce',\n    price: 200,\n    image_url: 'https://brookrest.com/wp-content/uploads/2020/05/AdobeStock_282247995-scaled.jpeg',\n    category: 'Burger',\n    availability: true,\n    rating: 4.5,\n    numReviews: 12\n  },\n  {\n    _id: '60d21b4667d0d8992e610c86',\n    name: 'Pizza',\n    description: 'Fresh pizza with chicken, bell peppers, and cheese',\n    price: 400,\n    image_url: 'https://th.bing.com/th/id/OIP._Tuj6ElUF8jhhcSg41_V_QHaE8?cb=iwp2&rs=1&pid=ImgDetMain',\n    category: 'Pizza',\n    availability: true,\n    rating: 4.2,\n    numReviews: 8\n  },\n  {\n    _id: '60d21b4667d0d8992e610c87',\n    name: 'Shawarma',\n    description: 'Delicious shawarma with grilled chicken, vegetables, and special sauce',\n    price: 200,\n    image_url: 'https://www.licious.in/blog/wp-content/uploads/2020/12/Chicken-Shawarma.jpg',\n    category: 'Shawarma',\n    availability: true,\n    rating: 4.0,\n    numReviews: 5\n  }\n];\n\n// List menu items action\nexport const listMenuItems = (category = '') => async (dispatch) => {\n  try {\n    dispatch({ type: MENU_ITEM_LIST_REQUEST });\n\n    const { data } = await axios.get(\n      category ? `/api/menu-items?category=${category}` : '/api/menu-items'\n    );\n\n    dispatch({\n      type: MENU_ITEM_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    console.error('Failed to fetch menu items from API, using mock data:', error);\n    \n    // Use mock data when API fails\n    const filteredMockData = category \n      ? mockMenuItems.filter(item => item.category === category)\n      : mockMenuItems;\n      \n    dispatch({\n      type: MENU_ITEM_LIST_SUCCESS, // Use SUCCESS instead of FAIL to show mock data\n      payload: filteredMockData,\n    });\n  }\n};\n\n// Get menu item details action\nexport const getMenuItemDetails = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: MENU_ITEM_DETAILS_REQUEST });\n\n    const { data } = await axios.get(`/api/menu-items/${id}`);\n\n    dispatch({\n      type: MENU_ITEM_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    console.error('Failed to fetch menu item details from API, using mock data:', error);\n    \n    // Find the menu item in our mock data\n    const mockMenuItem = mockMenuItems.find(item => item._id === id);\n    \n    if (mockMenuItem) {\n      dispatch({\n        type: MENU_ITEM_DETAILS_SUCCESS, // Use SUCCESS instead of FAIL to show mock data\n        payload: mockMenuItem,\n      });\n    } else {\n      // If we can't find the item in our mock data, create a generic one\n      const genericMenuItem = {\n        _id: id,\n        name: 'Sample Menu Item',\n        description: 'This is a sample menu item description used when API fails',\n        price: 15,\n        image_url: '/images/default-food.jpg',\n        category: 'Other',\n        availability: true,\n        rating: 4.0,\n        numReviews: 5\n      };\n      \n      dispatch({\n        type: MENU_ITEM_DETAILS_SUCCESS,\n        payload: genericMenuItem,\n      });\n    }\n  }\n};\n\n// Create menu item action (admin only)\nexport const createMenuItem = (menuItem) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: MENU_ITEM_CREATE_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    try {\n      // Try to create with the API\n      const { data } = await axios.post('/api/menu-items', menuItem, config);\n\n      dispatch({\n        type: MENU_ITEM_CREATE_SUCCESS,\n        payload: data,\n      });\n    } catch (apiError) {\n      console.error('API error during menu item creation:', apiError);\n      \n      // If there's a network error, use mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock creation due to API failure');\n        \n        // Create new mock item with generated ID\n        const newItem = {\n          _id: 'mock_item_' + Date.now(),\n          ...menuItem,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          rating: 0,\n          numReviews: 0\n        };\n        \n        // Add to mockMenuItems array if it exists\n        if (typeof mockMenuItems !== 'undefined') {\n          mockMenuItems.push(newItem);\n        }\n        \n        // Dispatch success with the mock data\n        dispatch({\n          type: MENU_ITEM_CREATE_SUCCESS,\n          payload: newItem,\n        });\n        \n        // Return success to the component\n        return newItem;\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: MENU_ITEM_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// Update menu item action (admin only)\nexport const updateMenuItem = (menuItem) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: MENU_ITEM_UPDATE_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    try {\n      // Try to update with the API\n      const { data } = await axios.put(\n        `/api/menu-items/${menuItem._id}`,\n        menuItem,\n        config\n      );\n\n      dispatch({\n        type: MENU_ITEM_UPDATE_SUCCESS,\n        payload: data,\n      });\n    } catch (apiError) {\n      console.error('API error during menu item update:', apiError);\n      \n      // If there's a network error, use mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock update due to API failure');\n        \n        // Create updated mock item\n        const updatedItem = {\n          ...menuItem,\n          updated_at: new Date().toISOString()\n        };\n        \n        // Update the mockMenuItems array if it exists\n        if (typeof mockMenuItems !== 'undefined') {\n          const index = mockMenuItems.findIndex(item => item._id === menuItem._id);\n          if (index !== -1) {\n            mockMenuItems[index] = updatedItem;\n          }\n        }\n        \n        // Dispatch success with the mock data\n        dispatch({\n          type: MENU_ITEM_UPDATE_SUCCESS,\n          payload: updatedItem,\n        });\n        \n        // Return success to the component\n        return updatedItem;\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: MENU_ITEM_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// Delete menu item action (admin only)\nexport const deleteMenuItem = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: MENU_ITEM_DELETE_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    try {\n      // Try to delete with the API\n      await axios.delete(`/api/menu-items/${id}`, config);\n\n      dispatch({\n        type: MENU_ITEM_DELETE_SUCCESS,\n      });\n    } catch (apiError) {\n      console.error('API error during menu item deletion:', apiError);\n      \n      // If there's a network error, use mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock deletion due to API failure');\n        \n        // Remove from mockMenuItems array if it exists\n        if (typeof mockMenuItems !== 'undefined') {\n          const index = mockMenuItems.findIndex(item => item._id === id);\n          if (index !== -1) {\n            mockMenuItems.splice(index, 1);\n          }\n        }\n        \n        // Dispatch success\n        dispatch({\n          type: MENU_ITEM_DELETE_SUCCESS,\n        });\n        \n        return true; // Return success to the component\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: MENU_ITEM_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}