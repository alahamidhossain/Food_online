{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_DETAILS_RESET, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL } from '../constants/userConstants';\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nimport { transferGuestCart, loadUserCart } from './cartActions';\n\n// Helper function to get user-specific localStorage keys\nconst getUserKey = userId => key => `${key}_${userId}`;\n\n// Login action\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      // Attempt to login with the server\n      const {\n        data\n      } = await axios.post('/api/users/login', {\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n      localStorage.setItem('userInfo', JSON.stringify(data));\n\n      // Transfer any guest cart items to the user's cart\n      dispatch(transferGuestCart());\n\n      // Load user's cart from server\n      dispatch(loadUserCart());\n      return true; // Login successful\n    } catch (apiError) {\n      console.error('API error during login:', apiError);\n\n      // If there's a network error, create a mock user for demo purposes\n      if (apiError.message === 'Network Error' || !apiError.response) {\n        console.log('Using mock login due to network error');\n\n        // Check for admin login\n        const isAdmin = email === 'admin@admin.com' && password === 'admin123';\n\n        // Create mock user data\n        const mockUserData = {\n          _id: isAdmin ? 'mock_admin_id' : 'mock_' + Date.now(),\n          name: isAdmin ? 'Admin User' : email.split('@')[0],\n          email: email,\n          role: isAdmin ? 'admin' : 'customer',\n          token: 'mock_token_' + Math.random().toString(36).substring(2, 15)\n        };\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: mockUserData\n        });\n        localStorage.setItem('userInfo', JSON.stringify(mockUserData));\n\n        // Transfer any guest cart items to the mock user's cart\n        dispatch(transferGuestCart());\n        return true; // Mock login successful\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n    return false; // Login failed\n  }\n};\n\n// Logout action\nexport const logout = () => dispatch => {\n  // Get user ID before removing userInfo\n  const userInfo = JSON.parse(localStorage.getItem('userInfo'));\n  const userId = userInfo === null || userInfo === void 0 ? void 0 : userInfo._id;\n\n  // Clear user data from localStorage\n  localStorage.removeItem('userInfo');\n\n  // Clear user-specific cart data if we have a userId\n  if (userId) {\n    const getUserKeyWithId = getUserKey(userId);\n    localStorage.removeItem(getUserKeyWithId('cartItems'));\n    localStorage.removeItem(getUserKeyWithId('shippingAddress'));\n    localStorage.removeItem(getUserKeyWithId('paymentMethod'));\n    localStorage.removeItem(getUserKeyWithId('coupon'));\n  }\n\n  // Clear Redux state\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: ORDER_LIST_MY_RESET\n  });\n  dispatch({\n    type: CART_CLEAR_ITEMS\n  });\n\n  // Redirect to home page\n  window.location.href = '/';\n};\n\n// Register action\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      // Attempt to register with the server\n      const {\n        data\n      } = await axios.post('/api/users', {\n        name,\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data\n      });\n\n      // Auto login after registration\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n      localStorage.setItem('userInfo', JSON.stringify(data));\n\n      // Transfer any guest cart items to the new user's cart\n      dispatch(transferGuestCart());\n      return true; // Registration successful\n    } catch (apiError) {\n      console.error('API error during registration:', apiError);\n\n      // If there's a network error, create a mock user for demo purposes\n      if (apiError.message === 'Network Error' || !apiError.response) {\n        console.log('Using mock registration due to network error');\n\n        // Create mock user data\n        const mockUserData = {\n          _id: 'mock_' + Date.now(),\n          name: name,\n          email: email,\n          role: 'customer',\n          token: 'mock_token_' + Math.random().toString(36).substring(2, 15)\n        };\n        dispatch({\n          type: USER_REGISTER_SUCCESS,\n          payload: mockUserData\n        });\n\n        // Auto login with mock data\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: mockUserData\n        });\n        localStorage.setItem('userInfo', JSON.stringify(mockUserData));\n\n        // Transfer any guest cart items to the mock user's cart\n        dispatch(transferGuestCart());\n        return true; // Mock registration successful\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n    return false; // Registration failed\n  }\n};\n\n// Get user details action\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Update user profile action\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/users/profile', user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n\n    // Update login state with new user data\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","ORDER_LIST_MY_RESET","CART_CLEAR_ITEMS","transferGuestCart","loadUserCart","getUserKey","userId","key","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","apiError","console","error","message","response","log","isAdmin","mockUserData","_id","Date","now","name","split","role","token","Math","random","toString","substring","logout","userInfo","parse","getItem","removeItem","getUserKeyWithId","window","location","href","register","getUserDetails","id","getState","userLogin","Authorization","get","updateUserProfile","user","put"],"sources":["C:/Users/HP/CascadeProjects/food-ordering-system/client/src/actions/userActions.js"],"sourcesContent":["import axios from 'axios';\nimport {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  USER_DETAILS_RESET,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_UPDATE_PROFILE_FAIL\n} from '../constants/userConstants';\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nimport { transferGuestCart, loadUserCart } from './cartActions';\n\n// Helper function to get user-specific localStorage keys\nconst getUserKey = (userId) => (key) => `${key}_${userId}`;\n\n// Login action\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_LOGIN_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      // Attempt to login with the server\n      const { data } = await axios.post(\n        '/api/users/login',\n        { email, password },\n        config\n      );\n\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data,\n      });\n\n      localStorage.setItem('userInfo', JSON.stringify(data));\n      \n      // Transfer any guest cart items to the user's cart\n      dispatch(transferGuestCart());\n      \n      // Load user's cart from server\n      dispatch(loadUserCart());\n      \n      return true; // Login successful\n    } catch (apiError) {\n      console.error('API error during login:', apiError);\n      \n      // If there's a network error, create a mock user for demo purposes\n      if (apiError.message === 'Network Error' || !apiError.response) {\n        console.log('Using mock login due to network error');\n        \n        // Check for admin login\n        const isAdmin = email === 'admin@admin.com' && password === 'admin123';\n        \n        // Create mock user data\n        const mockUserData = {\n          _id: isAdmin ? 'mock_admin_id' : 'mock_' + Date.now(),\n          name: isAdmin ? 'Admin User' : email.split('@')[0],\n          email: email,\n          role: isAdmin ? 'admin' : 'customer',\n          token: 'mock_token_' + Math.random().toString(36).substring(2, 15),\n        };\n        \n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: mockUserData,\n        });\n        \n        localStorage.setItem('userInfo', JSON.stringify(mockUserData));\n        \n        // Transfer any guest cart items to the mock user's cart\n        dispatch(transferGuestCart());\n        \n        return true; // Mock login successful\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n    \n    return false; // Login failed\n  }\n};\n\n// Logout action\nexport const logout = () => (dispatch) => {\n  // Get user ID before removing userInfo\n  const userInfo = JSON.parse(localStorage.getItem('userInfo'));\n  const userId = userInfo?._id;\n  \n  // Clear user data from localStorage\n  localStorage.removeItem('userInfo');\n  \n  // Clear user-specific cart data if we have a userId\n  if (userId) {\n    const getUserKeyWithId = getUserKey(userId);\n    localStorage.removeItem(getUserKeyWithId('cartItems'));\n    localStorage.removeItem(getUserKeyWithId('shippingAddress'));\n    localStorage.removeItem(getUserKeyWithId('paymentMethod'));\n    localStorage.removeItem(getUserKeyWithId('coupon'));\n  }\n  \n  // Clear Redux state\n  dispatch({ type: USER_LOGOUT });\n  dispatch({ type: USER_DETAILS_RESET });\n  dispatch({ type: ORDER_LIST_MY_RESET });\n  dispatch({ type: CART_CLEAR_ITEMS });\n  \n  // Redirect to home page\n  window.location.href = '/';\n};\n\n// Register action\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_REGISTER_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      // Attempt to register with the server\n      const { data } = await axios.post(\n        '/api/users',\n        { name, email, password },\n        config\n      );\n\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data,\n      });\n\n      // Auto login after registration\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data,\n      });\n\n      localStorage.setItem('userInfo', JSON.stringify(data));\n      \n      // Transfer any guest cart items to the new user's cart\n      dispatch(transferGuestCart());\n      \n      return true; // Registration successful\n    } catch (apiError) {\n      console.error('API error during registration:', apiError);\n      \n      // If there's a network error, create a mock user for demo purposes\n      if (apiError.message === 'Network Error' || !apiError.response) {\n        console.log('Using mock registration due to network error');\n        \n        // Create mock user data\n        const mockUserData = {\n          _id: 'mock_' + Date.now(),\n          name: name,\n          email: email,\n          role: 'customer',\n          token: 'mock_token_' + Math.random().toString(36).substring(2, 15),\n        };\n        \n        dispatch({\n          type: USER_REGISTER_SUCCESS,\n          payload: mockUserData,\n        });\n        \n        // Auto login with mock data\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: mockUserData,\n        });\n        \n        localStorage.setItem('userInfo', JSON.stringify(mockUserData));\n        \n        // Transfer any guest cart items to the mock user's cart\n        dispatch(transferGuestCart());\n        \n        return true; // Mock registration successful\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n    \n    return false; // Registration failed\n  }\n};\n\n// Get user details action\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: USER_DETAILS_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`/api/users/${id}`, config);\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// Update user profile action\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: USER_UPDATE_PROFILE_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.put('/api/users/profile', user, config);\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data,\n    });\n\n    // Update login state with new user data\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}