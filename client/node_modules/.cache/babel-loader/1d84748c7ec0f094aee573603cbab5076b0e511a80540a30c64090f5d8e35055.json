{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_DETAILS_RESET, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAIL, USER_LIST_RESET, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from '../constants/userConstants';\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nimport { transferGuestCart, loadUserCart } from './cartActions';\n\n// Mock users data for when API fails\nconst mockUsers = [{\n  _id: 'user_1',\n  name: 'John Doe',\n  email: 'john@example.com',\n  isAdmin: false,\n  createdAt: '2023-01-15T10:00:00Z'\n}, {\n  _id: 'user_2',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  isAdmin: false,\n  createdAt: '2023-02-20T11:30:00Z'\n}, {\n  _id: 'admin_1',\n  name: 'Admin User',\n  email: 'admin@admin.com',\n  isAdmin: true,\n  createdAt: '2023-01-01T09:00:00Z'\n}];\n\n// Helper function to get user-specific localStorage keys\nconst getUserKey = userId => key => `${key}_${userId}`;\n\n// Login action\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      // Attempt to login with the server\n      const {\n        data\n      } = await axios.post('/api/users/login', {\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n      localStorage.setItem('userInfo', JSON.stringify(data));\n\n      // Transfer any guest cart items to the user's cart\n      dispatch(transferGuestCart());\n\n      // Load user's cart from server\n      dispatch(loadUserCart());\n      return true; // Login successful\n    } catch (apiError) {\n      console.error('API error during login:', apiError);\n\n      // If there's a network error, create a mock user for demo purposes\n      if (apiError.message === 'Network Error' || !apiError.response) {\n        console.log('Using mock login due to network error');\n\n        // Check for admin login\n        const isAdmin = email === 'admin@admin.com' && password === 'admin123';\n\n        // Create mock user data\n        const mockUserData = {\n          _id: isAdmin ? 'mock_admin_id' : 'mock_' + Date.now(),\n          name: isAdmin ? 'Admin User' : email.split('@')[0],\n          email: email,\n          role: isAdmin ? 'admin' : 'customer',\n          token: 'mock_token_' + Math.random().toString(36).substring(2, 15)\n        };\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: mockUserData\n        });\n        localStorage.setItem('userInfo', JSON.stringify(mockUserData));\n\n        // Transfer any guest cart items to the mock user's cart\n        dispatch(transferGuestCart());\n        return true; // Mock login successful\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n    return false; // Login failed\n  }\n};\n\n// Logout action\nexport const logout = () => dispatch => {\n  // Get user ID before removing userInfo\n  const userInfo = JSON.parse(localStorage.getItem('userInfo'));\n  const userId = userInfo === null || userInfo === void 0 ? void 0 : userInfo._id;\n\n  // Clear user data from localStorage\n  localStorage.removeItem('userInfo');\n\n  // Clear user-specific cart data if we have a userId\n  if (userId) {\n    const getUserKeyWithId = getUserKey(userId);\n    localStorage.removeItem(getUserKeyWithId('cartItems'));\n    localStorage.removeItem(getUserKeyWithId('shippingAddress'));\n    localStorage.removeItem(getUserKeyWithId('paymentMethod'));\n    localStorage.removeItem(getUserKeyWithId('coupon'));\n  }\n\n  // Clear Redux state\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: ORDER_LIST_MY_RESET\n  });\n  dispatch({\n    type: CART_CLEAR_ITEMS\n  });\n\n  // Redirect to home page\n  window.location.href = '/';\n};\n\n// Register action\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      // Attempt to register with the server\n      const {\n        data\n      } = await axios.post('/api/users', {\n        name,\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data\n      });\n\n      // Auto login after registration\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n      localStorage.setItem('userInfo', JSON.stringify(data));\n\n      // Transfer any guest cart items to the new user's cart\n      dispatch(transferGuestCart());\n      return true; // Registration successful\n    } catch (apiError) {\n      console.error('API error during registration:', apiError);\n\n      // If there's a network error, create a mock user for demo purposes\n      if (apiError.message === 'Network Error' || !apiError.response) {\n        console.log('Using mock registration due to network error');\n\n        // Create mock user data\n        const mockUserData = {\n          _id: 'mock_' + Date.now(),\n          name: name,\n          email: email,\n          role: 'customer',\n          token: 'mock_token_' + Math.random().toString(36).substring(2, 15)\n        };\n        dispatch({\n          type: USER_REGISTER_SUCCESS,\n          payload: mockUserData\n        });\n\n        // Auto login with mock data\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: mockUserData\n        });\n        localStorage.setItem('userInfo', JSON.stringify(mockUserData));\n\n        // Transfer any guest cart items to the mock user's cart\n        dispatch(transferGuestCart());\n        return true; // Mock registration successful\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n    return false; // Registration failed\n  }\n};\n\n// Get user details action\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Update user profile action\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/users/profile', user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n\n    // Update the user info in localStorage and in the login state\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Admin: List all users action\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    try {\n      // Try to get users from API\n      const {\n        data\n      } = await axios.get('/api/users', config);\n      dispatch({\n        type: USER_LIST_SUCCESS,\n        payload: data\n      });\n    } catch (apiError) {\n      console.error('API error during user list fetch:', apiError);\n\n      // If there's a network error, use mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock users due to API failure');\n        dispatch({\n          type: USER_LIST_SUCCESS,\n          payload: mockUsers\n        });\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Admin: Delete user action\nexport const deleteUser = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    try {\n      // Try to delete user with API\n      await axios.delete(`/api/users/${id}`, config);\n      dispatch({\n        type: USER_DELETE_SUCCESS\n      });\n    } catch (apiError) {\n      console.error('API error during user deletion:', apiError);\n\n      // If there's a network error, simulate success with mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock deletion due to API failure');\n        dispatch({\n          type: USER_DELETE_SUCCESS\n        });\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Admin: Update user action\nexport const updateUser = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    try {\n      // Try to update user with API\n      const {\n        data\n      } = await axios.put(`/api/users/${user._id}`, user, config);\n      dispatch({\n        type: USER_UPDATE_SUCCESS\n      });\n      dispatch({\n        type: USER_DETAILS_SUCCESS,\n        payload: data\n      });\n    } catch (apiError) {\n      console.error('API error during user update:', apiError);\n\n      // If there's a network error, simulate success with mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock update due to API failure');\n\n        // Create updated mock user\n        const updatedUser = {\n          ...user,\n          updated_at: new Date().toISOString()\n        };\n        dispatch({\n          type: USER_UPDATE_SUCCESS\n        });\n        dispatch({\n          type: USER_DETAILS_SUCCESS,\n          payload: updatedUser\n        });\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","ORDER_LIST_MY_RESET","CART_CLEAR_ITEMS","transferGuestCart","loadUserCart","mockUsers","_id","name","email","isAdmin","createdAt","getUserKey","userId","key","login","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","apiError","console","error","message","response","log","mockUserData","Date","now","split","role","token","Math","random","toString","substring","logout","userInfo","parse","getItem","removeItem","getUserKeyWithId","window","location","href","register","getUserDetails","id","getState","userLogin","Authorization","get","updateUserProfile","user","put","listUsers","status","deleteUser","delete","updateUser","updatedUser","updated_at","toISOString"],"sources":["C:/Users/HP/CascadeProjects/food-ordering-system/client/src/actions/userActions.js"],"sourcesContent":["import axios from 'axios';\nimport {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  USER_DETAILS_RESET,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_LIST_REQUEST,\n  USER_LIST_SUCCESS,\n  USER_LIST_FAIL,\n  USER_LIST_RESET,\n  USER_DELETE_REQUEST,\n  USER_DELETE_SUCCESS,\n  USER_DELETE_FAIL,\n  USER_UPDATE_REQUEST,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_FAIL\n} from '../constants/userConstants';\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nimport { transferGuestCart, loadUserCart } from './cartActions';\n\n// Mock users data for when API fails\nconst mockUsers = [\n  {\n    _id: 'user_1',\n    name: 'John Doe',\n    email: 'john@example.com',\n    isAdmin: false,\n    createdAt: '2023-01-15T10:00:00Z'\n  },\n  {\n    _id: 'user_2',\n    name: 'Jane Smith',\n    email: 'jane@example.com',\n    isAdmin: false,\n    createdAt: '2023-02-20T11:30:00Z'\n  },\n  {\n    _id: 'admin_1',\n    name: 'Admin User',\n    email: 'admin@admin.com',\n    isAdmin: true,\n    createdAt: '2023-01-01T09:00:00Z'\n  }\n];\n\n// Helper function to get user-specific localStorage keys\nconst getUserKey = (userId) => (key) => `${key}_${userId}`;\n\n// Login action\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_LOGIN_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      // Attempt to login with the server\n      const { data } = await axios.post(\n        '/api/users/login',\n        { email, password },\n        config\n      );\n\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data,\n      });\n\n      localStorage.setItem('userInfo', JSON.stringify(data));\n      \n      // Transfer any guest cart items to the user's cart\n      dispatch(transferGuestCart());\n      \n      // Load user's cart from server\n      dispatch(loadUserCart());\n      \n      return true; // Login successful\n    } catch (apiError) {\n      console.error('API error during login:', apiError);\n      \n      // If there's a network error, create a mock user for demo purposes\n      if (apiError.message === 'Network Error' || !apiError.response) {\n        console.log('Using mock login due to network error');\n        \n        // Check for admin login\n        const isAdmin = email === 'admin@admin.com' && password === 'admin123';\n        \n        // Create mock user data\n        const mockUserData = {\n          _id: isAdmin ? 'mock_admin_id' : 'mock_' + Date.now(),\n          name: isAdmin ? 'Admin User' : email.split('@')[0],\n          email: email,\n          role: isAdmin ? 'admin' : 'customer',\n          token: 'mock_token_' + Math.random().toString(36).substring(2, 15),\n        };\n        \n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: mockUserData,\n        });\n        \n        localStorage.setItem('userInfo', JSON.stringify(mockUserData));\n        \n        // Transfer any guest cart items to the mock user's cart\n        dispatch(transferGuestCart());\n        \n        return true; // Mock login successful\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n    \n    return false; // Login failed\n  }\n};\n\n// Logout action\nexport const logout = () => (dispatch) => {\n  // Get user ID before removing userInfo\n  const userInfo = JSON.parse(localStorage.getItem('userInfo'));\n  const userId = userInfo?._id;\n  \n  // Clear user data from localStorage\n  localStorage.removeItem('userInfo');\n  \n  // Clear user-specific cart data if we have a userId\n  if (userId) {\n    const getUserKeyWithId = getUserKey(userId);\n    localStorage.removeItem(getUserKeyWithId('cartItems'));\n    localStorage.removeItem(getUserKeyWithId('shippingAddress'));\n    localStorage.removeItem(getUserKeyWithId('paymentMethod'));\n    localStorage.removeItem(getUserKeyWithId('coupon'));\n  }\n  \n  // Clear Redux state\n  dispatch({ type: USER_LOGOUT });\n  dispatch({ type: USER_DETAILS_RESET });\n  dispatch({ type: ORDER_LIST_MY_RESET });\n  dispatch({ type: CART_CLEAR_ITEMS });\n  \n  // Redirect to home page\n  window.location.href = '/';\n};\n\n// Register action\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_REGISTER_REQUEST });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      // Attempt to register with the server\n      const { data } = await axios.post(\n        '/api/users',\n        { name, email, password },\n        config\n      );\n\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data,\n      });\n\n      // Auto login after registration\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data,\n      });\n\n      localStorage.setItem('userInfo', JSON.stringify(data));\n      \n      // Transfer any guest cart items to the new user's cart\n      dispatch(transferGuestCart());\n      \n      return true; // Registration successful\n    } catch (apiError) {\n      console.error('API error during registration:', apiError);\n      \n      // If there's a network error, create a mock user for demo purposes\n      if (apiError.message === 'Network Error' || !apiError.response) {\n        console.log('Using mock registration due to network error');\n        \n        // Create mock user data\n        const mockUserData = {\n          _id: 'mock_' + Date.now(),\n          name: name,\n          email: email,\n          role: 'customer',\n          token: 'mock_token_' + Math.random().toString(36).substring(2, 15),\n        };\n        \n        dispatch({\n          type: USER_REGISTER_SUCCESS,\n          payload: mockUserData,\n        });\n        \n        // Auto login with mock data\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: mockUserData,\n        });\n        \n        localStorage.setItem('userInfo', JSON.stringify(mockUserData));\n        \n        // Transfer any guest cart items to the mock user's cart\n        dispatch(transferGuestCart());\n        \n        return true; // Mock registration successful\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n    \n    return false; // Registration failed\n  }\n};\n\n// Get user details action\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: USER_DETAILS_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`/api/users/${id}`, config);\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// Update user profile action\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: USER_UPDATE_PROFILE_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.put('/api/users/profile', user, config);\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data,\n    });\n\n    // Update the user info in localStorage and in the login state\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// Admin: List all users action\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({ type: USER_LIST_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    try {\n      // Try to get users from API\n      const { data } = await axios.get('/api/users', config);\n\n      dispatch({\n        type: USER_LIST_SUCCESS,\n        payload: data,\n      });\n    } catch (apiError) {\n      console.error('API error during user list fetch:', apiError);\n      \n      // If there's a network error, use mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock users due to API failure');\n        \n        dispatch({\n          type: USER_LIST_SUCCESS,\n          payload: mockUsers,\n        });\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// Admin: Delete user action\nexport const deleteUser = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: USER_DELETE_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    try {\n      // Try to delete user with API\n      await axios.delete(`/api/users/${id}`, config);\n\n      dispatch({ type: USER_DELETE_SUCCESS });\n    } catch (apiError) {\n      console.error('API error during user deletion:', apiError);\n      \n      // If there's a network error, simulate success with mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock deletion due to API failure');\n        \n        dispatch({ type: USER_DELETE_SUCCESS });\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// Admin: Update user action\nexport const updateUser = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: USER_UPDATE_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    try {\n      // Try to update user with API\n      const { data } = await axios.put(`/api/users/${user._id}`, user, config);\n\n      dispatch({ type: USER_UPDATE_SUCCESS });\n      dispatch({ type: USER_DETAILS_SUCCESS, payload: data });\n    } catch (apiError) {\n      console.error('API error during user update:', apiError);\n      \n      // If there's a network error, simulate success with mock data\n      if (apiError.message === 'Network Error' || !apiError.response || apiError.response.status === 500) {\n        console.log('Using mock update due to API failure');\n        \n        // Create updated mock user\n        const updatedUser = {\n          ...user,\n          updated_at: new Date().toISOString()\n        };\n        \n        dispatch({ type: USER_UPDATE_SUCCESS });\n        dispatch({ type: USER_DETAILS_SUCCESS, payload: updatedUser });\n      } else {\n        // If it's not a network error, throw the error to be caught by the outer catch\n        throw apiError;\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}