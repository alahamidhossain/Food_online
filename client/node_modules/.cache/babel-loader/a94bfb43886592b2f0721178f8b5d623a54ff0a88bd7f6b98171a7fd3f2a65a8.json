{"ast":null,"code":"import axios from 'axios';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_UPDATE_ITEM_QUANTITY, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD, CART_CLEAR_ITEMS, CART_APPLY_COUPON, CART_REMOVE_COUPON } from '../constants/cartConstants';\n\n// Helper function to get user-specific localStorage keys\nconst getUserKey = key => {\n  const userInfo = JSON.parse(localStorage.getItem('userInfo'));\n  if (userInfo && userInfo._id) {\n    return `${key}_${userInfo._id}`;\n  }\n  return key;\n};\n\n// Add item to cart action\nexport const addToCart = (id, quantity, specialInstructions = '') => async (dispatch, getState) => {\n  try {\n    // Try to get menu item from API\n    let menuItemData;\n    try {\n      const {\n        data\n      } = await axios.get(`/api/menu-items/${id}`);\n      menuItemData = data;\n    } catch (apiError) {\n      console.error('API error when fetching menu item for cart:', apiError);\n\n      // If API fails, check if we have mock data\n      if (typeof mockMenuItems !== 'undefined') {\n        menuItemData = mockMenuItems.find(item => item._id === id);\n      }\n\n      // If we still don't have data, use a fallback\n      if (!menuItemData) {\n        // Get menu item details from state if available\n        const {\n          menuItemDetails\n        } = getState();\n        if (menuItemDetails && menuItemDetails.menuItem && menuItemDetails.menuItem._id === id) {\n          menuItemData = menuItemDetails.menuItem;\n        } else {\n          // Create a generic item as last resort\n          menuItemData = {\n            _id: id,\n            name: 'Menu Item',\n            image_url: '/images/default-food.jpg',\n            price: 0\n          };\n        }\n      }\n    }\n\n    // Dispatch the add to cart action\n    dispatch({\n      type: CART_ADD_ITEM,\n      payload: {\n        menuItem: menuItemData._id,\n        name: menuItemData.name,\n        image: menuItemData.image_url,\n        price: menuItemData.price,\n        qty: quantity,\n        specialInstructions\n      }\n    });\n    const {\n      userLogin\n    } = getState();\n    if (userLogin.userInfo) {\n      // Save cart items with user-specific key\n      localStorage.setItem(getUserKey('cartItems'), JSON.stringify(getState().cart.cartItems));\n\n      // Also sync with server\n      try {\n        const config = {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${userLogin.userInfo.token}`\n          }\n        };\n        await axios.post('/api/cart', {\n          cartItems: getState().cart.cartItems\n        }, config);\n      } catch (error) {\n        console.error('Failed to sync cart with server:', error);\n        // Continue anyway, as we've saved to localStorage\n      }\n    } else {\n      // Guest cart\n      localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n    }\n  } catch (error) {\n    console.error('Error adding to cart:', error);\n  }\n};\n\n// Update cart item quantity action\nexport const updateCartItemQuantity = (id, qty) => (dispatch, getState) => {\n  dispatch({\n    type: CART_UPDATE_ITEM_QUANTITY,\n    payload: {\n      menuItem: id,\n      qty\n    }\n  });\n  const {\n    userLogin\n  } = getState();\n  if (userLogin.userInfo) {\n    localStorage.setItem(getUserKey('cartItems'), JSON.stringify(getState().cart.cartItems));\n\n    // Sync with server\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${userLogin.userInfo.token}`\n        }\n      };\n      axios.post('/api/cart/sync', {\n        cartItems: getState().cart.cartItems\n      }, config);\n    } catch (syncError) {\n      console.error('Error syncing cart with server:', syncError);\n    }\n  } else {\n    localStorage.setItem('guestCartItems', JSON.stringify(getState().cart.cartItems));\n  }\n};\n\n// Remove item from cart action\nexport const removeFromCart = id => (dispatch, getState) => {\n  dispatch({\n    type: CART_REMOVE_ITEM,\n    payload: id\n  });\n  const {\n    userLogin\n  } = getState();\n  if (userLogin.userInfo) {\n    localStorage.setItem(getUserKey('cartItems'), JSON.stringify(getState().cart.cartItems));\n\n    // Sync with server\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${userLogin.userInfo.token}`\n        }\n      };\n      axios.post('/api/cart/sync', {\n        cartItems: getState().cart.cartItems\n      }, config);\n    } catch (syncError) {\n      console.error('Error syncing cart with server:', syncError);\n    }\n  } else {\n    localStorage.setItem('guestCartItems', JSON.stringify(getState().cart.cartItems));\n  }\n};\n\n// Save shipping address action\nexport const saveShippingAddress = data => (dispatch, getState) => {\n  dispatch({\n    type: CART_SAVE_SHIPPING_ADDRESS,\n    payload: data\n  });\n  const {\n    userLogin\n  } = getState();\n  if (userLogin.userInfo) {\n    localStorage.setItem(getUserKey('shippingAddress'), JSON.stringify(data));\n  } else {\n    localStorage.setItem('guestShippingAddress', JSON.stringify(data));\n  }\n};\n\n// Save payment method action\nexport const savePaymentMethod = data => (dispatch, getState) => {\n  dispatch({\n    type: CART_SAVE_PAYMENT_METHOD,\n    payload: data\n  });\n  const {\n    userLogin\n  } = getState();\n  if (userLogin.userInfo) {\n    localStorage.setItem(getUserKey('paymentMethod'), JSON.stringify(data));\n  } else {\n    localStorage.setItem('guestPaymentMethod', JSON.stringify(data));\n  }\n};\n\n// Apply coupon action\nexport const applyCoupon = couponCode => async (dispatch, getState) => {\n  try {\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    if (!userInfo) {\n      throw new Error('You must be logged in to apply a coupon');\n    }\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n\n    // Use the validate endpoint with POST method instead of GET by ID\n    const {\n      data\n    } = await axios.post('/api/coupons/validate', {\n      code: couponCode\n    }, config);\n    if (data && data.valid) {\n      const couponData = {\n        code: couponCode,\n        discountPercent: data.discount_percent\n      };\n      dispatch({\n        type: CART_APPLY_COUPON,\n        payload: couponData\n      });\n      localStorage.setItem(getUserKey('coupon'), JSON.stringify(couponData));\n    } else {\n      throw new Error(data.message || 'Invalid or expired coupon');\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Error applying coupon:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n    throw error;\n  }\n};\n\n// Remove coupon action\nexport const removeCoupon = () => (dispatch, getState) => {\n  dispatch({\n    type: CART_REMOVE_COUPON\n  });\n  const {\n    userLogin\n  } = getState();\n  if (userLogin.userInfo) {\n    localStorage.removeItem(getUserKey('coupon'));\n  } else {\n    localStorage.removeItem('guestCoupon');\n  }\n};\n\n// Clear cart items action\nexport const clearCart = () => (dispatch, getState) => {\n  dispatch({\n    type: CART_CLEAR_ITEMS\n  });\n  const {\n    userLogin\n  } = getState();\n  if (userLogin.userInfo) {\n    localStorage.removeItem(getUserKey('cartItems'));\n    localStorage.removeItem(getUserKey('shippingAddress'));\n    localStorage.removeItem(getUserKey('paymentMethod'));\n    localStorage.removeItem(getUserKey('coupon'));\n\n    // Also clear from server\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${userLogin.userInfo.token}`\n        }\n      };\n      axios.delete('/api/cart', config);\n    } catch (clearError) {\n      console.error('Error clearing cart on server:', clearError);\n    }\n  } else {\n    localStorage.removeItem('guestCartItems');\n    localStorage.removeItem('guestShippingAddress');\n    localStorage.removeItem('guestPaymentMethod');\n    localStorage.removeItem('guestCoupon');\n  }\n};\n\n// Load user cart from localStorage or server\nexport const loadUserCart = () => async (dispatch, getState) => {\n  const {\n    userLogin\n  } = getState();\n  if (userLogin.userInfo) {\n    // Logged in user - try to get cart from server first\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${userLogin.userInfo.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get('/api/cart', config);\n      if (data && data.length > 0) {\n        // Convert server cart format to client format\n        const cartItems = data.map(item => ({\n          menuItem: item.menu_item_id._id,\n          name: item.menu_item_id.name,\n          image: item.menu_item_id.image_url,\n          price: item.menu_item_id.price,\n          qty: item.quantity,\n          specialInstructions: item.special_instructions || ''\n        }));\n        dispatch({\n          type: CART_ADD_ITEM,\n          payload: cartItems,\n          replace: true // Add a flag to replace the entire cart\n        });\n        return;\n      }\n\n      // If server cart is empty, try localStorage\n      const cartItems = localStorage.getItem(getUserKey('cartItems')) ? JSON.parse(localStorage.getItem(getUserKey('cartItems'))) : [];\n      if (cartItems.length > 0) {\n        dispatch({\n          type: CART_ADD_ITEM,\n          payload: cartItems,\n          replace: true\n        });\n\n        // Sync with server\n        try {\n          await axios.post('/api/cart/sync', {\n            cartItems\n          }, config);\n        } catch (syncError) {\n          console.error('Error syncing cart with server:', syncError);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading user cart:', error);\n    }\n  } else {\n    // Guest user - load from localStorage\n    const cartItems = localStorage.getItem('guestCartItems') ? JSON.parse(localStorage.getItem('guestCartItems')) : [];\n    if (cartItems.length > 0) {\n      dispatch({\n        type: CART_ADD_ITEM,\n        payload: cartItems,\n        replace: true\n      });\n    }\n  }\n};\n\n// Handle user login - transfer guest cart to user cart\nexport const transferGuestCart = () => async (dispatch, getState) => {\n  const guestCartItems = localStorage.getItem('guestCartItems') ? JSON.parse(localStorage.getItem('guestCartItems')) : [];\n  if (guestCartItems.length > 0) {\n    const {\n      userLogin\n    } = getState();\n    if (userLogin.userInfo) {\n      // Set the cart items in Redux\n      dispatch({\n        type: CART_ADD_ITEM,\n        payload: guestCartItems,\n        replace: true\n      });\n\n      // Save to user-specific localStorage\n      localStorage.setItem(getUserKey('cartItems'), JSON.stringify(guestCartItems));\n\n      // Clear guest cart\n      localStorage.removeItem('guestCartItems');\n\n      // Sync with server\n      try {\n        const config = {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${userLogin.userInfo.token}`\n          }\n        };\n        await axios.post('/api/cart/sync', {\n          cartItems: guestCartItems\n        }, config);\n      } catch (syncError) {\n        console.error('Error syncing cart with server:', syncError);\n      }\n    }\n  }\n\n  // Transfer other guest data\n  const guestShippingAddress = localStorage.getItem('guestShippingAddress') ? JSON.parse(localStorage.getItem('guestShippingAddress')) : null;\n  if (guestShippingAddress) {\n    dispatch({\n      type: CART_SAVE_SHIPPING_ADDRESS,\n      payload: guestShippingAddress\n    });\n    localStorage.setItem(getUserKey('shippingAddress'), JSON.stringify(guestShippingAddress));\n    localStorage.removeItem('guestShippingAddress');\n  }\n  const guestPaymentMethod = localStorage.getItem('guestPaymentMethod') ? JSON.parse(localStorage.getItem('guestPaymentMethod')) : null;\n  if (guestPaymentMethod) {\n    dispatch({\n      type: CART_SAVE_PAYMENT_METHOD,\n      payload: guestPaymentMethod\n    });\n    localStorage.setItem(getUserKey('paymentMethod'), JSON.stringify(guestPaymentMethod));\n    localStorage.removeItem('guestPaymentMethod');\n  }\n};","map":{"version":3,"names":["axios","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_UPDATE_ITEM_QUANTITY","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","CART_CLEAR_ITEMS","CART_APPLY_COUPON","CART_REMOVE_COUPON","getUserKey","key","userInfo","JSON","parse","localStorage","getItem","_id","addToCart","id","quantity","specialInstructions","dispatch","getState","menuItemData","data","get","apiError","console","error","mockMenuItems","find","item","menuItemDetails","menuItem","name","image_url","price","type","payload","image","qty","userLogin","setItem","stringify","cart","cartItems","config","headers","Authorization","token","post","updateCartItemQuantity","syncError","removeFromCart","saveShippingAddress","savePaymentMethod","applyCoupon","couponCode","Error","code","valid","couponData","discountPercent","discount_percent","message","_error$response","_error$response$data","response","removeCoupon","removeItem","clearCart","delete","clearError","loadUserCart","length","map","menu_item_id","special_instructions","replace","transferGuestCart","guestCartItems","guestShippingAddress","guestPaymentMethod"],"sources":["C:/Users/HP/CascadeProjects/food-ordering-system/client/src/actions/cartActions.js"],"sourcesContent":["import axios from 'axios';\nimport {\n  CART_ADD_ITEM,\n  CART_REMOVE_ITEM,\n  CART_UPDATE_ITEM_QUANTITY,\n  CART_SAVE_SHIPPING_ADDRESS,\n  CART_SAVE_PAYMENT_METHOD,\n  CART_CLEAR_ITEMS,\n  CART_APPLY_COUPON,\n  CART_REMOVE_COUPON\n} from '../constants/cartConstants';\n\n// Helper function to get user-specific localStorage keys\nconst getUserKey = (key) => {\n  const userInfo = JSON.parse(localStorage.getItem('userInfo'));\n  if (userInfo && userInfo._id) {\n    return `${key}_${userInfo._id}`;\n  }\n  return key;\n};\n\n// Add item to cart action\nexport const addToCart = (id, quantity, specialInstructions = '') => async (dispatch, getState) => {\n  try {\n    // Try to get menu item from API\n    let menuItemData;\n    try {\n      const { data } = await axios.get(`/api/menu-items/${id}`);\n      menuItemData = data;\n    } catch (apiError) {\n      console.error('API error when fetching menu item for cart:', apiError);\n      \n      // If API fails, check if we have mock data\n      if (typeof mockMenuItems !== 'undefined') {\n        menuItemData = mockMenuItems.find(item => item._id === id);\n      }\n      \n      // If we still don't have data, use a fallback\n      if (!menuItemData) {\n        // Get menu item details from state if available\n        const { menuItemDetails } = getState();\n        if (menuItemDetails && menuItemDetails.menuItem && menuItemDetails.menuItem._id === id) {\n          menuItemData = menuItemDetails.menuItem;\n        } else {\n          // Create a generic item as last resort\n          menuItemData = {\n            _id: id,\n            name: 'Menu Item',\n            image_url: '/images/default-food.jpg',\n            price: 0,\n          };\n        }\n      }\n    }\n\n    // Dispatch the add to cart action\n    dispatch({\n      type: CART_ADD_ITEM,\n      payload: {\n        menuItem: menuItemData._id,\n        name: menuItemData.name,\n        image: menuItemData.image_url,\n        price: menuItemData.price,\n        qty: quantity,\n        specialInstructions,\n      },\n    });\n\n    const { userLogin } = getState();\n    if (userLogin.userInfo) {\n      // Save cart items with user-specific key\n      localStorage.setItem(getUserKey('cartItems'), JSON.stringify(getState().cart.cartItems));\n      \n      // Also sync with server\n      try {\n        const config = {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${userLogin.userInfo.token}`,\n          },\n        };\n        \n        await axios.post('/api/cart', { cartItems: getState().cart.cartItems }, config);\n      } catch (error) {\n        console.error('Failed to sync cart with server:', error);\n        // Continue anyway, as we've saved to localStorage\n      }\n    } else {\n      // Guest cart\n      localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n    }\n  } catch (error) {\n    console.error('Error adding to cart:', error);\n  }\n};\n\n// Update cart item quantity action\nexport const updateCartItemQuantity = (id, qty) => (dispatch, getState) => {\n  dispatch({\n    type: CART_UPDATE_ITEM_QUANTITY,\n    payload: {\n      menuItem: id,\n      qty,\n    },\n  });\n\n  const { userLogin } = getState();\n  if (userLogin.userInfo) {\n    localStorage.setItem(getUserKey('cartItems'), JSON.stringify(getState().cart.cartItems));\n    \n    // Sync with server\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${userLogin.userInfo.token}`,\n        },\n      };\n      \n      axios.post('/api/cart/sync', { cartItems: getState().cart.cartItems }, config);\n    } catch (syncError) {\n      console.error('Error syncing cart with server:', syncError);\n    }\n  } else {\n    localStorage.setItem('guestCartItems', JSON.stringify(getState().cart.cartItems));\n  }\n};\n\n// Remove item from cart action\nexport const removeFromCart = (id) => (dispatch, getState) => {\n  dispatch({\n    type: CART_REMOVE_ITEM,\n    payload: id,\n  });\n\n  const { userLogin } = getState();\n  if (userLogin.userInfo) {\n    localStorage.setItem(getUserKey('cartItems'), JSON.stringify(getState().cart.cartItems));\n    \n    // Sync with server\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${userLogin.userInfo.token}`,\n        },\n      };\n      \n      axios.post('/api/cart/sync', { cartItems: getState().cart.cartItems }, config);\n    } catch (syncError) {\n      console.error('Error syncing cart with server:', syncError);\n    }\n  } else {\n    localStorage.setItem('guestCartItems', JSON.stringify(getState().cart.cartItems));\n  }\n};\n\n// Save shipping address action\nexport const saveShippingAddress = (data) => (dispatch, getState) => {\n  dispatch({\n    type: CART_SAVE_SHIPPING_ADDRESS,\n    payload: data,\n  });\n\n  const { userLogin } = getState();\n  if (userLogin.userInfo) {\n    localStorage.setItem(getUserKey('shippingAddress'), JSON.stringify(data));\n  } else {\n    localStorage.setItem('guestShippingAddress', JSON.stringify(data));\n  }\n};\n\n// Save payment method action\nexport const savePaymentMethod = (data) => (dispatch, getState) => {\n  dispatch({\n    type: CART_SAVE_PAYMENT_METHOD,\n    payload: data,\n  });\n\n  const { userLogin } = getState();\n  if (userLogin.userInfo) {\n    localStorage.setItem(getUserKey('paymentMethod'), JSON.stringify(data));\n  } else {\n    localStorage.setItem('guestPaymentMethod', JSON.stringify(data));\n  }\n};\n\n// Apply coupon action\nexport const applyCoupon = (couponCode) => async (dispatch, getState) => {\n  try {\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    if (!userInfo) {\n      throw new Error('You must be logged in to apply a coupon');\n    }\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    // Use the validate endpoint with POST method instead of GET by ID\n    const { data } = await axios.post(\n      '/api/coupons/validate',\n      { code: couponCode },\n      config\n    );\n\n    if (data && data.valid) {\n      const couponData = {\n        code: couponCode,\n        discountPercent: data.discount_percent,\n      };\n      \n      dispatch({\n        type: CART_APPLY_COUPON,\n        payload: couponData,\n      });\n\n      localStorage.setItem(getUserKey('coupon'), JSON.stringify(couponData));\n    } else {\n      throw new Error(data.message || 'Invalid or expired coupon');\n    }\n  } catch (error) {\n    console.error('Error applying coupon:', error.response?.data?.message || error.message);\n    throw error;\n  }\n};\n\n// Remove coupon action\nexport const removeCoupon = () => (dispatch, getState) => {\n  dispatch({\n    type: CART_REMOVE_COUPON,\n  });\n\n  const { userLogin } = getState();\n  if (userLogin.userInfo) {\n    localStorage.removeItem(getUserKey('coupon'));\n  } else {\n    localStorage.removeItem('guestCoupon');\n  }\n};\n\n// Clear cart items action\nexport const clearCart = () => (dispatch, getState) => {\n  dispatch({\n    type: CART_CLEAR_ITEMS,\n  });\n\n  const { userLogin } = getState();\n  if (userLogin.userInfo) {\n    localStorage.removeItem(getUserKey('cartItems'));\n    localStorage.removeItem(getUserKey('shippingAddress'));\n    localStorage.removeItem(getUserKey('paymentMethod'));\n    localStorage.removeItem(getUserKey('coupon'));\n    \n    // Also clear from server\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${userLogin.userInfo.token}`,\n        },\n      };\n      \n      axios.delete('/api/cart', config);\n    } catch (clearError) {\n      console.error('Error clearing cart on server:', clearError);\n    }\n  } else {\n    localStorage.removeItem('guestCartItems');\n    localStorage.removeItem('guestShippingAddress');\n    localStorage.removeItem('guestPaymentMethod');\n    localStorage.removeItem('guestCoupon');\n  }\n};\n\n// Load user cart from localStorage or server\nexport const loadUserCart = () => async (dispatch, getState) => {\n  const { userLogin } = getState();\n  \n  if (userLogin.userInfo) {\n    // Logged in user - try to get cart from server first\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${userLogin.userInfo.token}`,\n        },\n      };\n      \n      const { data } = await axios.get('/api/cart', config);\n      \n      if (data && data.length > 0) {\n        // Convert server cart format to client format\n        const cartItems = data.map(item => ({\n          menuItem: item.menu_item_id._id,\n          name: item.menu_item_id.name,\n          image: item.menu_item_id.image_url,\n          price: item.menu_item_id.price,\n          qty: item.quantity,\n          specialInstructions: item.special_instructions || ''\n        }));\n        \n        dispatch({\n          type: CART_ADD_ITEM,\n          payload: cartItems,\n          replace: true, // Add a flag to replace the entire cart\n        });\n        \n        return;\n      }\n      \n      // If server cart is empty, try localStorage\n      const cartItems = localStorage.getItem(getUserKey('cartItems'))\n        ? JSON.parse(localStorage.getItem(getUserKey('cartItems')))\n        : [];\n      \n      if (cartItems.length > 0) {\n        dispatch({\n          type: CART_ADD_ITEM,\n          payload: cartItems,\n          replace: true,\n        });\n        \n        // Sync with server\n        try {\n          await axios.post('/api/cart/sync', { cartItems }, config);\n        } catch (syncError) {\n          console.error('Error syncing cart with server:', syncError);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading user cart:', error);\n    }\n  } else {\n    // Guest user - load from localStorage\n    const cartItems = localStorage.getItem('guestCartItems')\n      ? JSON.parse(localStorage.getItem('guestCartItems'))\n      : [];\n    \n    if (cartItems.length > 0) {\n      dispatch({\n        type: CART_ADD_ITEM,\n        payload: cartItems,\n        replace: true,\n      });\n    }\n  }\n};\n\n// Handle user login - transfer guest cart to user cart\nexport const transferGuestCart = () => async (dispatch, getState) => {\n  const guestCartItems = localStorage.getItem('guestCartItems')\n    ? JSON.parse(localStorage.getItem('guestCartItems'))\n    : [];\n  \n  if (guestCartItems.length > 0) {\n    const { userLogin } = getState();\n    \n    if (userLogin.userInfo) {\n      // Set the cart items in Redux\n      dispatch({\n        type: CART_ADD_ITEM,\n        payload: guestCartItems,\n        replace: true,\n      });\n      \n      // Save to user-specific localStorage\n      localStorage.setItem(getUserKey('cartItems'), JSON.stringify(guestCartItems));\n      \n      // Clear guest cart\n      localStorage.removeItem('guestCartItems');\n      \n      // Sync with server\n      try {\n        const config = {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${userLogin.userInfo.token}`,\n          },\n        };\n        \n        await axios.post('/api/cart/sync', { cartItems: guestCartItems }, config);\n      } catch (syncError) {\n        console.error('Error syncing cart with server:', syncError);\n      }\n    }\n  }\n  \n  // Transfer other guest data\n  const guestShippingAddress = localStorage.getItem('guestShippingAddress')\n    ? JSON.parse(localStorage.getItem('guestShippingAddress'))\n    : null;\n  \n  if (guestShippingAddress) {\n    dispatch({\n      type: CART_SAVE_SHIPPING_ADDRESS,\n      payload: guestShippingAddress,\n    });\n    \n    localStorage.setItem(getUserKey('shippingAddress'), JSON.stringify(guestShippingAddress));\n    localStorage.removeItem('guestShippingAddress');\n  }\n  \n  const guestPaymentMethod = localStorage.getItem('guestPaymentMethod')\n    ? JSON.parse(localStorage.getItem('guestPaymentMethod'))\n    : null;\n  \n  if (guestPaymentMethod) {\n    dispatch({\n      type: CART_SAVE_PAYMENT_METHOD,\n      payload: guestPaymentMethod,\n    });\n    \n    localStorage.setItem(getUserKey('paymentMethod'), JSON.stringify(guestPaymentMethod));\n    localStorage.removeItem('guestPaymentMethod');\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,aAAa,EACbC,gBAAgB,EAChBC,yBAAyB,EACzBC,0BAA0B,EAC1BC,wBAAwB,EACxBC,gBAAgB,EAChBC,iBAAiB,EACjBC,kBAAkB,QACb,4BAA4B;;AAEnC;AACA,MAAMC,UAAU,GAAIC,GAAG,IAAK;EAC1B,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;EAC7D,IAAIJ,QAAQ,IAAIA,QAAQ,CAACK,GAAG,EAAE;IAC5B,OAAO,GAAGN,GAAG,IAAIC,QAAQ,CAACK,GAAG,EAAE;EACjC;EACA,OAAON,GAAG;AACZ,CAAC;;AAED;AACA,OAAO,MAAMO,SAAS,GAAGA,CAACC,EAAE,EAAEC,QAAQ,EAAEC,mBAAmB,GAAG,EAAE,KAAK,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACjG,IAAI;IACF;IACA,IAAIC,YAAY;IAChB,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMxB,KAAK,CAACyB,GAAG,CAAC,mBAAmBP,EAAE,EAAE,CAAC;MACzDK,YAAY,GAAGC,IAAI;IACrB,CAAC,CAAC,OAAOE,QAAQ,EAAE;MACjBC,OAAO,CAACC,KAAK,CAAC,6CAA6C,EAAEF,QAAQ,CAAC;;MAEtE;MACA,IAAI,OAAOG,aAAa,KAAK,WAAW,EAAE;QACxCN,YAAY,GAAGM,aAAa,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACf,GAAG,KAAKE,EAAE,CAAC;MAC5D;;MAEA;MACA,IAAI,CAACK,YAAY,EAAE;QACjB;QACA,MAAM;UAAES;QAAgB,CAAC,GAAGV,QAAQ,CAAC,CAAC;QACtC,IAAIU,eAAe,IAAIA,eAAe,CAACC,QAAQ,IAAID,eAAe,CAACC,QAAQ,CAACjB,GAAG,KAAKE,EAAE,EAAE;UACtFK,YAAY,GAAGS,eAAe,CAACC,QAAQ;QACzC,CAAC,MAAM;UACL;UACAV,YAAY,GAAG;YACbP,GAAG,EAAEE,EAAE;YACPgB,IAAI,EAAE,WAAW;YACjBC,SAAS,EAAE,0BAA0B;YACrCC,KAAK,EAAE;UACT,CAAC;QACH;MACF;IACF;;IAEA;IACAf,QAAQ,CAAC;MACPgB,IAAI,EAAEpC,aAAa;MACnBqC,OAAO,EAAE;QACPL,QAAQ,EAAEV,YAAY,CAACP,GAAG;QAC1BkB,IAAI,EAAEX,YAAY,CAACW,IAAI;QACvBK,KAAK,EAAEhB,YAAY,CAACY,SAAS;QAC7BC,KAAK,EAAEb,YAAY,CAACa,KAAK;QACzBI,GAAG,EAAErB,QAAQ;QACbC;MACF;IACF,CAAC,CAAC;IAEF,MAAM;MAAEqB;IAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC;IAChC,IAAImB,SAAS,CAAC9B,QAAQ,EAAE;MACtB;MACAG,YAAY,CAAC4B,OAAO,CAACjC,UAAU,CAAC,WAAW,CAAC,EAAEG,IAAI,CAAC+B,SAAS,CAACrB,QAAQ,CAAC,CAAC,CAACsB,IAAI,CAACC,SAAS,CAAC,CAAC;;MAExF;MACA,IAAI;QACF,MAAMC,MAAM,GAAG;UACbC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAE,UAAUP,SAAS,CAAC9B,QAAQ,CAACsC,KAAK;UACnD;QACF,CAAC;QAED,MAAMjD,KAAK,CAACkD,IAAI,CAAC,WAAW,EAAE;UAAEL,SAAS,EAAEvB,QAAQ,CAAC,CAAC,CAACsB,IAAI,CAACC;QAAU,CAAC,EAAEC,MAAM,CAAC;MACjF,CAAC,CAAC,OAAOlB,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxD;MACF;IACF,CAAC,MAAM;MACL;MACAd,YAAY,CAAC4B,OAAO,CAAC,WAAW,EAAE9B,IAAI,CAAC+B,SAAS,CAACrB,QAAQ,CAAC,CAAC,CAACsB,IAAI,CAACC,SAAS,CAAC,CAAC;IAC9E;EACF,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EAC/C;AACF,CAAC;;AAED;AACA,OAAO,MAAMuB,sBAAsB,GAAGA,CAACjC,EAAE,EAAEsB,GAAG,KAAK,CAACnB,QAAQ,EAAEC,QAAQ,KAAK;EACzED,QAAQ,CAAC;IACPgB,IAAI,EAAElC,yBAAyB;IAC/BmC,OAAO,EAAE;MACPL,QAAQ,EAAEf,EAAE;MACZsB;IACF;EACF,CAAC,CAAC;EAEF,MAAM;IAAEC;EAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC;EAChC,IAAImB,SAAS,CAAC9B,QAAQ,EAAE;IACtBG,YAAY,CAAC4B,OAAO,CAACjC,UAAU,CAAC,WAAW,CAAC,EAAEG,IAAI,CAAC+B,SAAS,CAACrB,QAAQ,CAAC,CAAC,CAACsB,IAAI,CAACC,SAAS,CAAC,CAAC;;IAExF;IACA,IAAI;MACF,MAAMC,MAAM,GAAG;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUP,SAAS,CAAC9B,QAAQ,CAACsC,KAAK;QACnD;MACF,CAAC;MAEDjD,KAAK,CAACkD,IAAI,CAAC,gBAAgB,EAAE;QAAEL,SAAS,EAAEvB,QAAQ,CAAC,CAAC,CAACsB,IAAI,CAACC;MAAU,CAAC,EAAEC,MAAM,CAAC;IAChF,CAAC,CAAC,OAAOM,SAAS,EAAE;MAClBzB,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEwB,SAAS,CAAC;IAC7D;EACF,CAAC,MAAM;IACLtC,YAAY,CAAC4B,OAAO,CAAC,gBAAgB,EAAE9B,IAAI,CAAC+B,SAAS,CAACrB,QAAQ,CAAC,CAAC,CAACsB,IAAI,CAACC,SAAS,CAAC,CAAC;EACnF;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,cAAc,GAAInC,EAAE,IAAK,CAACG,QAAQ,EAAEC,QAAQ,KAAK;EAC5DD,QAAQ,CAAC;IACPgB,IAAI,EAAEnC,gBAAgB;IACtBoC,OAAO,EAAEpB;EACX,CAAC,CAAC;EAEF,MAAM;IAAEuB;EAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC;EAChC,IAAImB,SAAS,CAAC9B,QAAQ,EAAE;IACtBG,YAAY,CAAC4B,OAAO,CAACjC,UAAU,CAAC,WAAW,CAAC,EAAEG,IAAI,CAAC+B,SAAS,CAACrB,QAAQ,CAAC,CAAC,CAACsB,IAAI,CAACC,SAAS,CAAC,CAAC;;IAExF;IACA,IAAI;MACF,MAAMC,MAAM,GAAG;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUP,SAAS,CAAC9B,QAAQ,CAACsC,KAAK;QACnD;MACF,CAAC;MAEDjD,KAAK,CAACkD,IAAI,CAAC,gBAAgB,EAAE;QAAEL,SAAS,EAAEvB,QAAQ,CAAC,CAAC,CAACsB,IAAI,CAACC;MAAU,CAAC,EAAEC,MAAM,CAAC;IAChF,CAAC,CAAC,OAAOM,SAAS,EAAE;MAClBzB,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEwB,SAAS,CAAC;IAC7D;EACF,CAAC,MAAM;IACLtC,YAAY,CAAC4B,OAAO,CAAC,gBAAgB,EAAE9B,IAAI,CAAC+B,SAAS,CAACrB,QAAQ,CAAC,CAAC,CAACsB,IAAI,CAACC,SAAS,CAAC,CAAC;EACnF;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,mBAAmB,GAAI9B,IAAI,IAAK,CAACH,QAAQ,EAAEC,QAAQ,KAAK;EACnED,QAAQ,CAAC;IACPgB,IAAI,EAAEjC,0BAA0B;IAChCkC,OAAO,EAAEd;EACX,CAAC,CAAC;EAEF,MAAM;IAAEiB;EAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC;EAChC,IAAImB,SAAS,CAAC9B,QAAQ,EAAE;IACtBG,YAAY,CAAC4B,OAAO,CAACjC,UAAU,CAAC,iBAAiB,CAAC,EAAEG,IAAI,CAAC+B,SAAS,CAACnB,IAAI,CAAC,CAAC;EAC3E,CAAC,MAAM;IACLV,YAAY,CAAC4B,OAAO,CAAC,sBAAsB,EAAE9B,IAAI,CAAC+B,SAAS,CAACnB,IAAI,CAAC,CAAC;EACpE;AACF,CAAC;;AAED;AACA,OAAO,MAAM+B,iBAAiB,GAAI/B,IAAI,IAAK,CAACH,QAAQ,EAAEC,QAAQ,KAAK;EACjED,QAAQ,CAAC;IACPgB,IAAI,EAAEhC,wBAAwB;IAC9BiC,OAAO,EAAEd;EACX,CAAC,CAAC;EAEF,MAAM;IAAEiB;EAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC;EAChC,IAAImB,SAAS,CAAC9B,QAAQ,EAAE;IACtBG,YAAY,CAAC4B,OAAO,CAACjC,UAAU,CAAC,eAAe,CAAC,EAAEG,IAAI,CAAC+B,SAAS,CAACnB,IAAI,CAAC,CAAC;EACzE,CAAC,MAAM;IACLV,YAAY,CAAC4B,OAAO,CAAC,oBAAoB,EAAE9B,IAAI,CAAC+B,SAAS,CAACnB,IAAI,CAAC,CAAC;EAClE;AACF,CAAC;;AAED;AACA,OAAO,MAAMgC,WAAW,GAAIC,UAAU,IAAK,OAAOpC,QAAQ,EAAEC,QAAQ,KAAK;EACvE,IAAI;IACF,MAAM;MACJmB,SAAS,EAAE;QAAE9B;MAAS;IACxB,CAAC,GAAGW,QAAQ,CAAC,CAAC;IAEd,IAAI,CAACX,QAAQ,EAAE;MACb,MAAM,IAAI+C,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEA,MAAMZ,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUrC,QAAQ,CAACsC,KAAK;MACzC;IACF,CAAC;;IAED;IACA,MAAM;MAAEzB;IAAK,CAAC,GAAG,MAAMxB,KAAK,CAACkD,IAAI,CAC/B,uBAAuB,EACvB;MAAES,IAAI,EAAEF;IAAW,CAAC,EACpBX,MACF,CAAC;IAED,IAAItB,IAAI,IAAIA,IAAI,CAACoC,KAAK,EAAE;MACtB,MAAMC,UAAU,GAAG;QACjBF,IAAI,EAAEF,UAAU;QAChBK,eAAe,EAAEtC,IAAI,CAACuC;MACxB,CAAC;MAED1C,QAAQ,CAAC;QACPgB,IAAI,EAAE9B,iBAAiB;QACvB+B,OAAO,EAAEuB;MACX,CAAC,CAAC;MAEF/C,YAAY,CAAC4B,OAAO,CAACjC,UAAU,CAAC,QAAQ,CAAC,EAAEG,IAAI,CAAC+B,SAAS,CAACkB,UAAU,CAAC,CAAC;IACxE,CAAC,MAAM;MACL,MAAM,IAAIH,KAAK,CAAClC,IAAI,CAACwC,OAAO,IAAI,2BAA2B,CAAC;IAC9D;EACF,CAAC,CAAC,OAAOpC,KAAK,EAAE;IAAA,IAAAqC,eAAA,EAAAC,oBAAA;IACdvC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAE,EAAAqC,eAAA,GAAArC,KAAK,CAACuC,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBzC,IAAI,cAAA0C,oBAAA,uBAApBA,oBAAA,CAAsBF,OAAO,KAAIpC,KAAK,CAACoC,OAAO,CAAC;IACvF,MAAMpC,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMwC,YAAY,GAAGA,CAAA,KAAM,CAAC/C,QAAQ,EAAEC,QAAQ,KAAK;EACxDD,QAAQ,CAAC;IACPgB,IAAI,EAAE7B;EACR,CAAC,CAAC;EAEF,MAAM;IAAEiC;EAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC;EAChC,IAAImB,SAAS,CAAC9B,QAAQ,EAAE;IACtBG,YAAY,CAACuD,UAAU,CAAC5D,UAAU,CAAC,QAAQ,CAAC,CAAC;EAC/C,CAAC,MAAM;IACLK,YAAY,CAACuD,UAAU,CAAC,aAAa,CAAC;EACxC;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM,CAACjD,QAAQ,EAAEC,QAAQ,KAAK;EACrDD,QAAQ,CAAC;IACPgB,IAAI,EAAE/B;EACR,CAAC,CAAC;EAEF,MAAM;IAAEmC;EAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC;EAChC,IAAImB,SAAS,CAAC9B,QAAQ,EAAE;IACtBG,YAAY,CAACuD,UAAU,CAAC5D,UAAU,CAAC,WAAW,CAAC,CAAC;IAChDK,YAAY,CAACuD,UAAU,CAAC5D,UAAU,CAAC,iBAAiB,CAAC,CAAC;IACtDK,YAAY,CAACuD,UAAU,CAAC5D,UAAU,CAAC,eAAe,CAAC,CAAC;IACpDK,YAAY,CAACuD,UAAU,CAAC5D,UAAU,CAAC,QAAQ,CAAC,CAAC;;IAE7C;IACA,IAAI;MACF,MAAMqC,MAAM,GAAG;QACbC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUP,SAAS,CAAC9B,QAAQ,CAACsC,KAAK;QACnD;MACF,CAAC;MAEDjD,KAAK,CAACuE,MAAM,CAAC,WAAW,EAAEzB,MAAM,CAAC;IACnC,CAAC,CAAC,OAAO0B,UAAU,EAAE;MACnB7C,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAE4C,UAAU,CAAC;IAC7D;EACF,CAAC,MAAM;IACL1D,YAAY,CAACuD,UAAU,CAAC,gBAAgB,CAAC;IACzCvD,YAAY,CAACuD,UAAU,CAAC,sBAAsB,CAAC;IAC/CvD,YAAY,CAACuD,UAAU,CAAC,oBAAoB,CAAC;IAC7CvD,YAAY,CAACuD,UAAU,CAAC,aAAa,CAAC;EACxC;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,YAAY,GAAGA,CAAA,KAAM,OAAOpD,QAAQ,EAAEC,QAAQ,KAAK;EAC9D,MAAM;IAAEmB;EAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC;EAEhC,IAAImB,SAAS,CAAC9B,QAAQ,EAAE;IACtB;IACA,IAAI;MACF,MAAMmC,MAAM,GAAG;QACbC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUP,SAAS,CAAC9B,QAAQ,CAACsC,KAAK;QACnD;MACF,CAAC;MAED,MAAM;QAAEzB;MAAK,CAAC,GAAG,MAAMxB,KAAK,CAACyB,GAAG,CAAC,WAAW,EAAEqB,MAAM,CAAC;MAErD,IAAItB,IAAI,IAAIA,IAAI,CAACkD,MAAM,GAAG,CAAC,EAAE;QAC3B;QACA,MAAM7B,SAAS,GAAGrB,IAAI,CAACmD,GAAG,CAAC5C,IAAI,KAAK;UAClCE,QAAQ,EAAEF,IAAI,CAAC6C,YAAY,CAAC5D,GAAG;UAC/BkB,IAAI,EAAEH,IAAI,CAAC6C,YAAY,CAAC1C,IAAI;UAC5BK,KAAK,EAAER,IAAI,CAAC6C,YAAY,CAACzC,SAAS;UAClCC,KAAK,EAAEL,IAAI,CAAC6C,YAAY,CAACxC,KAAK;UAC9BI,GAAG,EAAET,IAAI,CAACZ,QAAQ;UAClBC,mBAAmB,EAAEW,IAAI,CAAC8C,oBAAoB,IAAI;QACpD,CAAC,CAAC,CAAC;QAEHxD,QAAQ,CAAC;UACPgB,IAAI,EAAEpC,aAAa;UACnBqC,OAAO,EAAEO,SAAS;UAClBiC,OAAO,EAAE,IAAI,CAAE;QACjB,CAAC,CAAC;QAEF;MACF;;MAEA;MACA,MAAMjC,SAAS,GAAG/B,YAAY,CAACC,OAAO,CAACN,UAAU,CAAC,WAAW,CAAC,CAAC,GAC3DG,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACN,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,GACzD,EAAE;MAEN,IAAIoC,SAAS,CAAC6B,MAAM,GAAG,CAAC,EAAE;QACxBrD,QAAQ,CAAC;UACPgB,IAAI,EAAEpC,aAAa;UACnBqC,OAAO,EAAEO,SAAS;UAClBiC,OAAO,EAAE;QACX,CAAC,CAAC;;QAEF;QACA,IAAI;UACF,MAAM9E,KAAK,CAACkD,IAAI,CAAC,gBAAgB,EAAE;YAAEL;UAAU,CAAC,EAAEC,MAAM,CAAC;QAC3D,CAAC,CAAC,OAAOM,SAAS,EAAE;UAClBzB,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEwB,SAAS,CAAC;QAC7D;MACF;IACF,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC,MAAM;IACL;IACA,MAAMiB,SAAS,GAAG/B,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,GACpDH,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC,GAClD,EAAE;IAEN,IAAI8B,SAAS,CAAC6B,MAAM,GAAG,CAAC,EAAE;MACxBrD,QAAQ,CAAC;QACPgB,IAAI,EAAEpC,aAAa;QACnBqC,OAAO,EAAEO,SAAS;QAClBiC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM,OAAO1D,QAAQ,EAAEC,QAAQ,KAAK;EACnE,MAAM0D,cAAc,GAAGlE,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,GACzDH,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC,GAClD,EAAE;EAEN,IAAIiE,cAAc,CAACN,MAAM,GAAG,CAAC,EAAE;IAC7B,MAAM;MAAEjC;IAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC;IAEhC,IAAImB,SAAS,CAAC9B,QAAQ,EAAE;MACtB;MACAU,QAAQ,CAAC;QACPgB,IAAI,EAAEpC,aAAa;QACnBqC,OAAO,EAAE0C,cAAc;QACvBF,OAAO,EAAE;MACX,CAAC,CAAC;;MAEF;MACAhE,YAAY,CAAC4B,OAAO,CAACjC,UAAU,CAAC,WAAW,CAAC,EAAEG,IAAI,CAAC+B,SAAS,CAACqC,cAAc,CAAC,CAAC;;MAE7E;MACAlE,YAAY,CAACuD,UAAU,CAAC,gBAAgB,CAAC;;MAEzC;MACA,IAAI;QACF,MAAMvB,MAAM,GAAG;UACbC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAE,UAAUP,SAAS,CAAC9B,QAAQ,CAACsC,KAAK;UACnD;QACF,CAAC;QAED,MAAMjD,KAAK,CAACkD,IAAI,CAAC,gBAAgB,EAAE;UAAEL,SAAS,EAAEmC;QAAe,CAAC,EAAElC,MAAM,CAAC;MAC3E,CAAC,CAAC,OAAOM,SAAS,EAAE;QAClBzB,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEwB,SAAS,CAAC;MAC7D;IACF;EACF;;EAEA;EACA,MAAM6B,oBAAoB,GAAGnE,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC,GACrEH,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC,CAAC,GACxD,IAAI;EAER,IAAIkE,oBAAoB,EAAE;IACxB5D,QAAQ,CAAC;MACPgB,IAAI,EAAEjC,0BAA0B;MAChCkC,OAAO,EAAE2C;IACX,CAAC,CAAC;IAEFnE,YAAY,CAAC4B,OAAO,CAACjC,UAAU,CAAC,iBAAiB,CAAC,EAAEG,IAAI,CAAC+B,SAAS,CAACsC,oBAAoB,CAAC,CAAC;IACzFnE,YAAY,CAACuD,UAAU,CAAC,sBAAsB,CAAC;EACjD;EAEA,MAAMa,kBAAkB,GAAGpE,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,GACjEH,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAAC,GACtD,IAAI;EAER,IAAImE,kBAAkB,EAAE;IACtB7D,QAAQ,CAAC;MACPgB,IAAI,EAAEhC,wBAAwB;MAC9BiC,OAAO,EAAE4C;IACX,CAAC,CAAC;IAEFpE,YAAY,CAAC4B,OAAO,CAACjC,UAAU,CAAC,eAAe,CAAC,EAAEG,IAAI,CAAC+B,SAAS,CAACuC,kBAAkB,CAAC,CAAC;IACrFpE,YAAY,CAACuD,UAAU,CAAC,oBAAoB,CAAC;EAC/C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}